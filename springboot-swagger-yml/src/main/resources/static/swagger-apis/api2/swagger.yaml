swagger: "2.0"
info:
  description: "This is a sample server Product-store server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Productstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "productstore.swagger.io"
basePath: "/v2"
tags:
- name: "employee"
  description: "Access to Product orders"
- name: "product"
  description: "Everything about your Product"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Product orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /product:
    post:
      tags:
      - "product"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addPrduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        "405":
          description: "Invalid input"
      security:
      - product_auth:
        - "write:product"
        - "read:product"
    put:
      tags:
      - "product"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
        "405":
          description: "Validation exception"
      security:
      - product_auth:
        - "write:product"
        - "read:product"
  /product/findByStatus:
    get:
      tags:
      - "product"
      summary: "Finds Product by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findProductByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Product'
        "400":
          description: "Invalid status value"
      security:
      - product_auth:
        - "write:product"
        - "read:product"
  /product/findByTags:
    get:
      tags:
      - "product"
      summary: "Finds Prouct by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findProductByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        "400":
          description: "Invalid tag value"
      security:
      - product_auth:
        - "write:product"
        - "read:product"
      deprecated: true
  /product/{id}:
    get:
      tags:
      - "product"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getProductById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
      security:
      - api_key: []
    post:
      tags:
      - "product"
      summary: "Updates a product in the store with form data"
      description: ""
      operationId: "updateProductWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of product that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the product"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the product"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - product_auth:
        - "write:product"
        - "read:product"
    delete:
      tags:
      - "product"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteProduct"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "product id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "product not found"
      security:
      - product_auth:
        - "write:product"
        - "read:product"
  /product/{id}/uploadImage:
    post:
      tags:
      - "product"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of product to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - product_auth:
        - "write:product"
        - "read:product"
        
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns product inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a product"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the product"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of productt that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
          
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
   
  /employee:
    post:
      tags:
      - "employee"
      summary: "Create employee"
      description: "This can only be done by the logged in user."
      operationId: "createEmployee"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created employee object"
        required: true
        schema:
          $ref: '#/definitions/Employee'
      responses:
        default:
          description: "successful operation"
  /employee/{id}:
    get:
      tags:
      - "employee"
      summary: "Find employee by ID"
      description: "Returns a single employee"
      operationId: "getEmpmloyeeById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of employee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: '#/definitions/Employee'
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Employee not found"
      security:
      - api_key: []
    put:
      tags:
      - "employee"
      summary: "Update employee"
      description: "This can only be done by the logged in user."
      operationId: "updateEmployee"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of employee to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Update employee object"
        required: true
        schema:
          $ref: '#/definitions/Employee'
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
      - "employee"
      summary: "Deletes a employee"
      description: ""
      operationId: "deleteEmployee"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "Employee id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Employee not found"
      security:
      - employee_auth:
        - "write:employee"
        - "read:employee"
        
securityDefinitions:
  product_auth:
    type: "oauth2"
    authorizationUrl: "http://productstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:product: "modify product in your account"
      read:product: "read your product"
  employee_auth:
    type: "oauth2"
    authorizationUrl: "http://productstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:employee: "modify employee in your account"
      read:employee: "read your employee"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      productId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Product:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "product status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Product"
  Gender:
    type: string
    description: "Gender Type"
    enum:
      - "male"
      - "female"
    xml:
      name: "Gender"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  BaseObject:
    type: "object"
    required:
    - "id"
    properties:
      id: 
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 10
    xml:
      name: "BaseObject"
  Address:
    allOf:
    - $ref: '#/definitions/BaseObject'
    - type: 'object'
    properties:
      street:
        type: 'string'
      buildingNo:
        type: 'string'
      city:
        type: 'string'
      state:
        type: 'string'
      zipCode:
        type: 'integer'
      country:
        type: 'string'
    xml:
      name: "Address"  
  Person:
    allOf: 
    - $ref: '#/definitions/BaseObject'
    type: "object"
    required:
    - "firstName"
    - "lastName"
    - "email"
    - "phone"
    properties:
      firstName:
        type: "string"
        minimum: 3
        maximum: 15
      lastName:
        type: "string"   
        minimum: 3
        maximum: 15
      dob:
        type: "string"
        format: "date-time"
      email:
        type: "string"
        minimum: 5
        maximum: 25
      phone:
       type: "string"
      address:
       $ref: '#/definitions/Address'
      gender:
       $ref: '#/definitions/Gender'
    xml:
      name: "Person"
  User:
    allOf:
    - $ref: "#/definitions/Person"
    type: "object"
    required:
    - "username"
    properties:
      username:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Department:
    allOf:
    - $ref: '#/definitions/BaseObject'
    - type: 'object'
    properties:
      deptName:
       type: 'string'
      address:
       $ref: '#/definitions/Address'
    xml:
      name: "Department"
  Employee:
    allOf:
    - $ref: "#/definitions/Person"
    - type: "object"
    properties:
      designation:
        type: "string"  
      salary:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 10
      department:
        $ref: '#/definitions/Department'
       
    xml:
      name: "Employee"
    
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"