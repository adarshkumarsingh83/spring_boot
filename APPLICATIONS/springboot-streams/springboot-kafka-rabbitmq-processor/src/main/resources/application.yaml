spring:
  application:
    name: @spring.application.name@
  profiles:
    active: @spring.profile.active@

server:
  port: 8899
---

spring:
  application:
    name: @spring.application.name@
  config:
    activate:
      on-profile:
        - rabbit-local
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
  cloud:
    stream:
      bindings:
        input:
          contentType: application/json
          destination: espark-topic
          group: espark-group
        output:
          contentType: application/json
          destination: espark-topic-process
          group: espark-group
---

spring:
  application:
    name: @spring.application.name@
  config:
    activate:
      on-profile:
        - rabbit-container
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USER}
    password: ${RABBITMQ_PASSWORD}
  cloud:
    stream:
      bindings:
        input:
          contentType: application/json
          destination: ${RABBITMQ_SOURCE}
          group: ${RABBITMQ_GROUP}
        output:
          contentType: application/json
          destination: ${RABBITMQ_DESTINATION}
          group: ${RABBITMQ_GROUP}
---

spring:
  application:
    name: @spring.application.name@
  config:
    activate:
      on-profile:
        - kafka-local
  cloud:
    stream:
      kafka:
        binder:
          brokers:  localhost:9092
          zkNodes:  localhost:2181
          minPartitionCount: 1
          replicationFactor: 1
          auto-create-topics: true
          auto-alter-topics: false
      bindings:
        input:
          contentType: application/json
          destination: espark-topic
          group: espark-group
        output:
          contentType: application/json
          destination: espark-topic-process
          group: espark-group

---

spring:
  application:
    name: @spring.application.name@
  config:
    activate:
      on-profile:
        - kafka-container
  cloud:
    stream:
      kafka:
        binder:
          brokers: ${KAFKA_BORKER}
          zkNodes: ${ZOOKEEPER_NODE}
          minPartitionCount: 1
          replicationFactor: 1
          auto-create-topics: true
          auto-alter-topics: false
      bindings:
        input:
          contentType: application/json
          destination: ${KAFKA_SOURCE}
          group: ${KAFKA_GROUP}
        output:
          contentType: application/json
          destination: ${KAFKA_DESTINATION}
          group: ${KAFKA_GROUP}
